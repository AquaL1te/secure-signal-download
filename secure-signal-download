#!/bin/bash

custom_error() { local retval=$?; printf 'ERROR %s\n' "$*" >&2; exit "$retval"; }
custom_info() { printf 'INFO %s\n' "$*"; }

tmpdir=$(mktemp -d)
repo_url="https://updates.signal.org/desktop/apt"
repo_dist="xenial"
packages_url="main/binary-amd64/Packages"


# Remove the previously downloaded Signal installer
rm --force signal-desktop.deb


# As of Wget 1.10, the default is to verify the server's certificate against the recognized certificate authorities
wget --quiet --output-document "$tmpdir/keys.asc" "$repo_url"/keys.asc 2>/dev/null || \
  custom_error "Could not download the Signal public key"

wget --quiet --output-document "$tmpdir/InRelease" "$repo_url"/dists/"$repo_dist"/InRelease 2>/dev/null || \
  custom_error "Could not download the InRelease file"

wget --quiet --output-document "$tmpdir/Packages" "$repo_url/dists/$repo_dist/$packages_url" 2>/dev/null || \
  custom_error "Could not download the Packages file"


# Import the downloaded Signal GPG key
gpg --quiet --import "$tmpdir/keys.asc" 2>/dev/null || \
  custom_error "Could not import Signal public key into GPG"

# Verify the downloaded InRelease file with the Signal public GPG key
gpg --quiet --verify "$tmpdir/InRelease" 2>/dev/null || \
  custom_error "The GPG signature of the InRelease file is invalid!"


# Get the hash of the downloaded Packages file
read -r packages_file_hash _ < <(sha256sum "$tmpdir/Packages")


while read -r packages_meta_hash _ packages_meta_file; do
  # Verify the hash of the downloaded Packages file with the hash from the verified (InRelease) metadata
  if [[ $packages_file_hash = "$packages_meta_hash" && $packages_url = "$packages_meta_file" ]]; then
    packages_file_verified="yes"
    break
  fi
done < "$tmpdir/InRelease"


# Continue if the Packages file is verfied
if [[ $packages_file_verified = "yes" ]]; then
  while IFS=': ' read -r key value; do
    # When the first 'Filename' line is found in the Packages file, get the signal-desktop.deb URL to download the latest version
    if [[ $key = "Filename" ]]; then
      signal_file="$value"
      wget --quiet --output-document signal-desktop.deb "$repo_url/$signal_file" 2>/dev/null || \
        custom_error "Could not download signal-desktop.deb from Packages metadata"
    fi
  
    # When the first 'SHA256' line is found in the Packages file...
    if [[ $key = "SHA256" ]]; then
      # Get the hash of the downloaded signal-desktop.deb file and...
      read -r signal_file_hash _ < <(sha256sum signal-desktop.deb)
  
      # Verify the hash of the downloaded signal-desktop.deb file with the hash from the verfied (Packages) metadata
      if [[ $signal_file_hash = "$value" ]]; then
        custom_info "$signal_file" "is verified as:" "$signal_file_hash"
        break
      fi
    fi
  done < "$tmpdir/Packages"
fi


# Remove the temporary downloaded files
rm --force --recursive "$tmpdir"
